// Code generated by github.com/jmattheis/goverter, DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/argoproj/argo-cd/v2/pkg/apis/application/v1alpha1"
	v1 "k8s.io/apiextensions-apiserver/pkg/apis/apiextensions/v1"
	v11 "k8s.io/apimachinery/pkg/apis/meta/v1"
	intstr "k8s.io/apimachinery/pkg/util/intstr"
)

type ConverterImpl struct{}

func (c *ConverterImpl) ToArgoApplicationSpec(source *ApplicationSetParameters) *v1alpha1.ApplicationSetSpec {
	var pV1alpha1ApplicationSetSpec *v1alpha1.ApplicationSetSpec
	if source != nil {
		var v1alpha1ApplicationSetSpec v1alpha1.ApplicationSetSpec
		v1alpha1ApplicationSetSpec.GoTemplate = (*source).GoTemplate
		var v1alpha1ApplicationSetGeneratorList []v1alpha1.ApplicationSetGenerator
		if (*source).Generators != nil {
			v1alpha1ApplicationSetGeneratorList = make([]v1alpha1.ApplicationSetGenerator, len((*source).Generators))
			for i := 0; i < len((*source).Generators); i++ {
				v1alpha1ApplicationSetGeneratorList[i] = c.v1alpha1ApplicationSetGeneratorToV1alpha1ApplicationSetGenerator((*source).Generators[i])
			}
		}
		v1alpha1ApplicationSetSpec.Generators = v1alpha1ApplicationSetGeneratorList
		v1alpha1ApplicationSetSpec.Template = c.v1alpha1ApplicationSetTemplateToV1alpha1ApplicationSetTemplate((*source).Template)
		v1alpha1ApplicationSetSpec.SyncPolicy = c.pV1alpha1ApplicationSetSyncPolicyToPV1alpha1ApplicationSetSyncPolicy((*source).SyncPolicy)
		v1alpha1ApplicationSetSpec.Strategy = c.pV1alpha1ApplicationSetStrategyToPV1alpha1ApplicationSetStrategy((*source).Strategy)
		v1alpha1ApplicationSetSpec.PreservedFields = c.pV1alpha1ApplicationPreservedFieldsToPV1alpha1ApplicationPreservedFields((*source).PreservedFields)
		var stringList []string
		if (*source).GoTemplateOptions != nil {
			stringList = make([]string, len((*source).GoTemplateOptions))
			for j := 0; j < len((*source).GoTemplateOptions); j++ {
				stringList[j] = (*source).GoTemplateOptions[j]
			}
		}
		v1alpha1ApplicationSetSpec.GoTemplateOptions = stringList
		v1alpha1ApplicationSetSpec.ApplyNestedSelectors = (*source).ApplyNestedSelectors
		pV1alpha1ApplicationSetSpec = &v1alpha1ApplicationSetSpec
	}
	return pV1alpha1ApplicationSetSpec
}
func (c *ConverterImpl) intstrIntOrStringToIntstrIntOrString(source intstr.IntOrString) intstr.IntOrString {
	var intstrIntOrString intstr.IntOrString
	intstrIntOrString.Type = intstr.Type(source.Type)
	intstrIntOrString.IntVal = source.IntVal
	intstrIntOrString.StrVal = source.StrVal
	return intstrIntOrString
}
func (c *ConverterImpl) pIntstrIntOrStringToPIntstrIntOrString(source *intstr.IntOrString) *intstr.IntOrString {
	var pIntstrIntOrString *intstr.IntOrString
	if source != nil {
		intstrIntOrString := c.intstrIntOrStringToIntstrIntOrString((*source))
		pIntstrIntOrString = &intstrIntOrString
	}
	return pIntstrIntOrString
}
func (c *ConverterImpl) pV1JSONToPV1JSON(source *v1.JSON) *v1.JSON {
	var pV1JSON *v1.JSON
	if source != nil {
		v1JSON := c.v1JSONToV1JSON((*source))
		pV1JSON = &v1JSON
	}
	return pV1JSON
}
func (c *ConverterImpl) pV1LabelSelectorToPV1LabelSelector(source *v11.LabelSelector) *v11.LabelSelector {
	var pV1LabelSelector *v11.LabelSelector
	if source != nil {
		v1LabelSelector := c.v1LabelSelectorToV1LabelSelector((*source))
		pV1LabelSelector = &v1LabelSelector
	}
	return pV1LabelSelector
}
func (c *ConverterImpl) pV1alpha1ApplicationPreservedFieldsToPV1alpha1ApplicationPreservedFields(source *ApplicationPreservedFields) *v1alpha1.ApplicationPreservedFields {
	var pV1alpha1ApplicationPreservedFields *v1alpha1.ApplicationPreservedFields
	if source != nil {
		var v1alpha1ApplicationPreservedFields v1alpha1.ApplicationPreservedFields
		var stringList []string
		if (*source).Annotations != nil {
			stringList = make([]string, len((*source).Annotations))
			for i := 0; i < len((*source).Annotations); i++ {
				stringList[i] = (*source).Annotations[i]
			}
		}
		v1alpha1ApplicationPreservedFields.Annotations = stringList
		pV1alpha1ApplicationPreservedFields = &v1alpha1ApplicationPreservedFields
	}
	return pV1alpha1ApplicationPreservedFields
}
func (c *ConverterImpl) pV1alpha1ApplicationSetRolloutStrategyToPV1alpha1ApplicationSetRolloutStrategy(source *ApplicationSetRolloutStrategy) *v1alpha1.ApplicationSetRolloutStrategy {
	var pV1alpha1ApplicationSetRolloutStrategy *v1alpha1.ApplicationSetRolloutStrategy
	if source != nil {
		var v1alpha1ApplicationSetRolloutStrategy v1alpha1.ApplicationSetRolloutStrategy
		var v1alpha1ApplicationSetRolloutStepList []v1alpha1.ApplicationSetRolloutStep
		if (*source).Steps != nil {
			v1alpha1ApplicationSetRolloutStepList = make([]v1alpha1.ApplicationSetRolloutStep, len((*source).Steps))
			for i := 0; i < len((*source).Steps); i++ {
				v1alpha1ApplicationSetRolloutStepList[i] = c.v1alpha1ApplicationSetRolloutStepToV1alpha1ApplicationSetRolloutStep((*source).Steps[i])
			}
		}
		v1alpha1ApplicationSetRolloutStrategy.Steps = v1alpha1ApplicationSetRolloutStepList
		pV1alpha1ApplicationSetRolloutStrategy = &v1alpha1ApplicationSetRolloutStrategy
	}
	return pV1alpha1ApplicationSetRolloutStrategy
}
func (c *ConverterImpl) pV1alpha1ApplicationSetStrategyToPV1alpha1ApplicationSetStrategy(source *ApplicationSetStrategy) *v1alpha1.ApplicationSetStrategy {
	var pV1alpha1ApplicationSetStrategy *v1alpha1.ApplicationSetStrategy
	if source != nil {
		var v1alpha1ApplicationSetStrategy v1alpha1.ApplicationSetStrategy
		v1alpha1ApplicationSetStrategy.Type = (*source).Type
		v1alpha1ApplicationSetStrategy.RollingSync = c.pV1alpha1ApplicationSetRolloutStrategyToPV1alpha1ApplicationSetRolloutStrategy((*source).RollingSync)
		pV1alpha1ApplicationSetStrategy = &v1alpha1ApplicationSetStrategy
	}
	return pV1alpha1ApplicationSetStrategy
}
func (c *ConverterImpl) pV1alpha1ApplicationSetSyncPolicyToPV1alpha1ApplicationSetSyncPolicy(source *ApplicationSetSyncPolicy) *v1alpha1.ApplicationSetSyncPolicy {
	var pV1alpha1ApplicationSetSyncPolicy *v1alpha1.ApplicationSetSyncPolicy
	if source != nil {
		var v1alpha1ApplicationSetSyncPolicy v1alpha1.ApplicationSetSyncPolicy
		v1alpha1ApplicationSetSyncPolicy.PreserveResourcesOnDeletion = (*source).PreserveResourcesOnDeletion
		var pV1alpha1ApplicationsSyncPolicy *v1alpha1.ApplicationsSyncPolicy
		if (*source).ApplicationsSync != nil {
			v1alpha1ApplicationsSyncPolicy := v1alpha1.ApplicationsSyncPolicy(*(*source).ApplicationsSync)
			pV1alpha1ApplicationsSyncPolicy = &v1alpha1ApplicationsSyncPolicy
		}
		v1alpha1ApplicationSetSyncPolicy.ApplicationsSync = pV1alpha1ApplicationsSyncPolicy
		pV1alpha1ApplicationSetSyncPolicy = &v1alpha1ApplicationSetSyncPolicy
	}
	return pV1alpha1ApplicationSetSyncPolicy
}
func (c *ConverterImpl) pV1alpha1ApplicationSourceDirectoryToPV1alpha1ApplicationSourceDirectory(source *ApplicationSourceDirectory) *v1alpha1.ApplicationSourceDirectory {
	var pV1alpha1ApplicationSourceDirectory *v1alpha1.ApplicationSourceDirectory
	if source != nil {
		var v1alpha1ApplicationSourceDirectory v1alpha1.ApplicationSourceDirectory
		var xbool bool
		if (*source).Recurse != nil {
			xbool = *(*source).Recurse
		}
		v1alpha1ApplicationSourceDirectory.Recurse = xbool
		v1alpha1ApplicationSourceDirectory.Jsonnet = c.v1alpha1ApplicationSourceJsonnetToV1alpha1ApplicationSourceJsonnet((*source).Jsonnet)
		var xstring string
		if (*source).Exclude != nil {
			xstring = *(*source).Exclude
		}
		v1alpha1ApplicationSourceDirectory.Exclude = xstring
		var xstring2 string
		if (*source).Include != nil {
			xstring2 = *(*source).Include
		}
		v1alpha1ApplicationSourceDirectory.Include = xstring2
		pV1alpha1ApplicationSourceDirectory = &v1alpha1ApplicationSourceDirectory
	}
	return pV1alpha1ApplicationSourceDirectory
}
func (c *ConverterImpl) pV1alpha1ApplicationSourceHelmToPV1alpha1ApplicationSourceHelm(source *ApplicationSourceHelm) *v1alpha1.ApplicationSourceHelm {
	var pV1alpha1ApplicationSourceHelm *v1alpha1.ApplicationSourceHelm
	if source != nil {
		var v1alpha1ApplicationSourceHelm v1alpha1.ApplicationSourceHelm
		var stringList []string
		if (*source).ValueFiles != nil {
			stringList = make([]string, len((*source).ValueFiles))
			for i := 0; i < len((*source).ValueFiles); i++ {
				stringList[i] = (*source).ValueFiles[i]
			}
		}
		v1alpha1ApplicationSourceHelm.ValueFiles = stringList
		var v1alpha1HelmParameterList []v1alpha1.HelmParameter
		if (*source).Parameters != nil {
			v1alpha1HelmParameterList = make([]v1alpha1.HelmParameter, len((*source).Parameters))
			for j := 0; j < len((*source).Parameters); j++ {
				v1alpha1HelmParameterList[j] = c.v1alpha1HelmParameterToV1alpha1HelmParameter((*source).Parameters[j])
			}
		}
		v1alpha1ApplicationSourceHelm.Parameters = v1alpha1HelmParameterList
		var xstring string
		if (*source).ReleaseName != nil {
			xstring = *(*source).ReleaseName
		}
		v1alpha1ApplicationSourceHelm.ReleaseName = xstring
		var xstring2 string
		if (*source).Values != nil {
			xstring2 = *(*source).Values
		}
		v1alpha1ApplicationSourceHelm.Values = xstring2
		var v1alpha1HelmFileParameterList []v1alpha1.HelmFileParameter
		if (*source).FileParameters != nil {
			v1alpha1HelmFileParameterList = make([]v1alpha1.HelmFileParameter, len((*source).FileParameters))
			for k := 0; k < len((*source).FileParameters); k++ {
				v1alpha1HelmFileParameterList[k] = c.v1alpha1HelmFileParameterToV1alpha1HelmFileParameter((*source).FileParameters[k])
			}
		}
		v1alpha1ApplicationSourceHelm.FileParameters = v1alpha1HelmFileParameterList
		var xstring3 string
		if (*source).Version != nil {
			xstring3 = *(*source).Version
		}
		v1alpha1ApplicationSourceHelm.Version = xstring3
		var xbool bool
		if (*source).PassCredentials != nil {
			xbool = *(*source).PassCredentials
		}
		v1alpha1ApplicationSourceHelm.PassCredentials = xbool
		var xbool2 bool
		if (*source).IgnoreMissingValueFiles != nil {
			xbool2 = *(*source).IgnoreMissingValueFiles
		}
		v1alpha1ApplicationSourceHelm.IgnoreMissingValueFiles = xbool2
		var xbool3 bool
		if (*source).SkipCrds != nil {
			xbool3 = *(*source).SkipCrds
		}
		v1alpha1ApplicationSourceHelm.SkipCrds = xbool3
		v1alpha1ApplicationSourceHelm.ValuesObject = ExtV1JSONToRuntimeRawExtension((*source).ValuesObject)
		pV1alpha1ApplicationSourceHelm = &v1alpha1ApplicationSourceHelm
	}
	return pV1alpha1ApplicationSourceHelm
}
func (c *ConverterImpl) pV1alpha1ApplicationSourceKustomizeToPV1alpha1ApplicationSourceKustomize(source *ApplicationSourceKustomize) *v1alpha1.ApplicationSourceKustomize {
	var pV1alpha1ApplicationSourceKustomize *v1alpha1.ApplicationSourceKustomize
	if source != nil {
		var v1alpha1ApplicationSourceKustomize v1alpha1.ApplicationSourceKustomize
		var xstring string
		if (*source).NamePrefix != nil {
			xstring = *(*source).NamePrefix
		}
		v1alpha1ApplicationSourceKustomize.NamePrefix = xstring
		var xstring2 string
		if (*source).NameSuffix != nil {
			xstring2 = *(*source).NameSuffix
		}
		v1alpha1ApplicationSourceKustomize.NameSuffix = xstring2
		v1alpha1ApplicationSourceKustomize.Images = c.v1alpha1KustomizeImagesToV1alpha1KustomizeImages((*source).Images)
		mapStringString := make(map[string]string, len((*source).CommonLabels))
		for key, value := range (*source).CommonLabels {
			mapStringString[key] = value
		}
		v1alpha1ApplicationSourceKustomize.CommonLabels = mapStringString
		var xstring3 string
		if (*source).Version != nil {
			xstring3 = *(*source).Version
		}
		v1alpha1ApplicationSourceKustomize.Version = xstring3
		mapStringString2 := make(map[string]string, len((*source).CommonAnnotations))
		for key2, value2 := range (*source).CommonAnnotations {
			mapStringString2[key2] = value2
		}
		v1alpha1ApplicationSourceKustomize.CommonAnnotations = mapStringString2
		var xbool bool
		if (*source).ForceCommonLabels != nil {
			xbool = *(*source).ForceCommonLabels
		}
		v1alpha1ApplicationSourceKustomize.ForceCommonLabels = xbool
		var xbool2 bool
		if (*source).ForceCommonAnnotations != nil {
			xbool2 = *(*source).ForceCommonAnnotations
		}
		v1alpha1ApplicationSourceKustomize.ForceCommonAnnotations = xbool2
		var xstring4 string
		if (*source).Namespace != nil {
			xstring4 = *(*source).Namespace
		}
		v1alpha1ApplicationSourceKustomize.Namespace = xstring4
		var xbool3 bool
		if (*source).CommonAnnotationsEnvsubst != nil {
			xbool3 = *(*source).CommonAnnotationsEnvsubst
		}
		v1alpha1ApplicationSourceKustomize.CommonAnnotationsEnvsubst = xbool3
		v1alpha1ApplicationSourceKustomize.Replicas = c.v1alpha1KustomizeReplicasToV1alpha1KustomizeReplicas((*source).Replicas)
		pV1alpha1ApplicationSourceKustomize = &v1alpha1ApplicationSourceKustomize
	}
	return pV1alpha1ApplicationSourceKustomize
}
func (c *ConverterImpl) pV1alpha1ApplicationSourcePluginToPV1alpha1ApplicationSourcePlugin(source *ApplicationSourcePlugin) *v1alpha1.ApplicationSourcePlugin {
	var pV1alpha1ApplicationSourcePlugin *v1alpha1.ApplicationSourcePlugin
	if source != nil {
		var v1alpha1ApplicationSourcePlugin v1alpha1.ApplicationSourcePlugin
		var xstring string
		if (*source).Name != nil {
			xstring = *(*source).Name
		}
		v1alpha1ApplicationSourcePlugin.Name = xstring
		v1alpha1ApplicationSourcePlugin.Env = c.v1alpha1EnvToV1alpha1Env((*source).Env)
		v1alpha1ApplicationSourcePlugin.Parameters = c.v1alpha1ApplicationSourcePluginParametersToV1alpha1ApplicationSourcePluginParameters((*source).Parameters)
		pV1alpha1ApplicationSourcePlugin = &v1alpha1ApplicationSourcePlugin
	}
	return pV1alpha1ApplicationSourcePlugin
}
func (c *ConverterImpl) pV1alpha1ApplicationSourceToPV1alpha1ApplicationSource(source *ApplicationSource) *v1alpha1.ApplicationSource {
	var pV1alpha1ApplicationSource *v1alpha1.ApplicationSource
	if source != nil {
		var v1alpha1ApplicationSource v1alpha1.ApplicationSource
		v1alpha1ApplicationSource.RepoURL = (*source).RepoURL
		var xstring string
		if (*source).Path != nil {
			xstring = *(*source).Path
		}
		v1alpha1ApplicationSource.Path = xstring
		var xstring2 string
		if (*source).TargetRevision != nil {
			xstring2 = *(*source).TargetRevision
		}
		v1alpha1ApplicationSource.TargetRevision = xstring2
		v1alpha1ApplicationSource.Helm = c.pV1alpha1ApplicationSourceHelmToPV1alpha1ApplicationSourceHelm((*source).Helm)
		v1alpha1ApplicationSource.Kustomize = c.pV1alpha1ApplicationSourceKustomizeToPV1alpha1ApplicationSourceKustomize((*source).Kustomize)
		v1alpha1ApplicationSource.Directory = c.pV1alpha1ApplicationSourceDirectoryToPV1alpha1ApplicationSourceDirectory((*source).Directory)
		v1alpha1ApplicationSource.Plugin = c.pV1alpha1ApplicationSourcePluginToPV1alpha1ApplicationSourcePlugin((*source).Plugin)
		var xstring3 string
		if (*source).Chart != nil {
			xstring3 = *(*source).Chart
		}
		v1alpha1ApplicationSource.Chart = xstring3
		var xstring4 string
		if (*source).Ref != nil {
			xstring4 = *(*source).Ref
		}
		v1alpha1ApplicationSource.Ref = xstring4
		pV1alpha1ApplicationSource = &v1alpha1ApplicationSource
	}
	return pV1alpha1ApplicationSource
}
func (c *ConverterImpl) pV1alpha1BackoffToPV1alpha1Backoff(source *Backoff) *v1alpha1.Backoff {
	var pV1alpha1Backoff *v1alpha1.Backoff
	if source != nil {
		var v1alpha1Backoff v1alpha1.Backoff
		var xstring string
		if (*source).Duration != nil {
			xstring = *(*source).Duration
		}
		v1alpha1Backoff.Duration = xstring
		var pInt64 *int64
		if (*source).Factor != nil {
			xint64 := *(*source).Factor
			pInt64 = &xint64
		}
		v1alpha1Backoff.Factor = pInt64
		var xstring2 string
		if (*source).MaxDuration != nil {
			xstring2 = *(*source).MaxDuration
		}
		v1alpha1Backoff.MaxDuration = xstring2
		pV1alpha1Backoff = &v1alpha1Backoff
	}
	return pV1alpha1Backoff
}
func (c *ConverterImpl) pV1alpha1BasicAuthBitbucketServerToPV1alpha1BasicAuthBitbucketServer(source *BasicAuthBitbucketServer) *v1alpha1.BasicAuthBitbucketServer {
	var pV1alpha1BasicAuthBitbucketServer *v1alpha1.BasicAuthBitbucketServer
	if source != nil {
		var v1alpha1BasicAuthBitbucketServer v1alpha1.BasicAuthBitbucketServer
		v1alpha1BasicAuthBitbucketServer.Username = (*source).Username
		v1alpha1BasicAuthBitbucketServer.PasswordRef = c.pV1alpha1SecretRefToPV1alpha1SecretRef((*source).PasswordRef)
		pV1alpha1BasicAuthBitbucketServer = &v1alpha1BasicAuthBitbucketServer
	}
	return pV1alpha1BasicAuthBitbucketServer
}
func (c *ConverterImpl) pV1alpha1BearerTokenBitbucketCloudToPV1alpha1BearerTokenBitbucketCloud(source *BearerTokenBitbucketCloud) *v1alpha1.BearerTokenBitbucketCloud {
	var pV1alpha1BearerTokenBitbucketCloud *v1alpha1.BearerTokenBitbucketCloud
	if source != nil {
		var v1alpha1BearerTokenBitbucketCloud v1alpha1.BearerTokenBitbucketCloud
		v1alpha1BearerTokenBitbucketCloud.TokenRef = c.pV1alpha1SecretRefToPV1alpha1SecretRef((*source).TokenRef)
		pV1alpha1BearerTokenBitbucketCloud = &v1alpha1BearerTokenBitbucketCloud
	}
	return pV1alpha1BearerTokenBitbucketCloud
}
func (c *ConverterImpl) pV1alpha1ClusterGeneratorToPV1alpha1ClusterGenerator(source *ClusterGenerator) *v1alpha1.ClusterGenerator {
	var pV1alpha1ClusterGenerator *v1alpha1.ClusterGenerator
	if source != nil {
		var v1alpha1ClusterGenerator v1alpha1.ClusterGenerator
		v1alpha1ClusterGenerator.Selector = c.v1LabelSelectorToV1LabelSelector((*source).Selector)
		v1alpha1ClusterGenerator.Template = c.v1alpha1ApplicationSetTemplateToV1alpha1ApplicationSetTemplate((*source).Template)
		mapStringString := make(map[string]string, len((*source).Values))
		for key, value := range (*source).Values {
			mapStringString[key] = value
		}
		v1alpha1ClusterGenerator.Values = mapStringString
		pV1alpha1ClusterGenerator = &v1alpha1ClusterGenerator
	}
	return pV1alpha1ClusterGenerator
}
func (c *ConverterImpl) pV1alpha1DuckTypeGeneratorToPV1alpha1DuckTypeGenerator(source *DuckTypeGenerator) *v1alpha1.DuckTypeGenerator {
	var pV1alpha1DuckTypeGenerator *v1alpha1.DuckTypeGenerator
	if source != nil {
		var v1alpha1DuckTypeGenerator v1alpha1.DuckTypeGenerator
		v1alpha1DuckTypeGenerator.ConfigMapRef = (*source).ConfigMapRef
		v1alpha1DuckTypeGenerator.Name = (*source).Name
		var pInt64 *int64
		if (*source).RequeueAfterSeconds != nil {
			xint64 := *(*source).RequeueAfterSeconds
			pInt64 = &xint64
		}
		v1alpha1DuckTypeGenerator.RequeueAfterSeconds = pInt64
		v1alpha1DuckTypeGenerator.LabelSelector = c.v1LabelSelectorToV1LabelSelector((*source).LabelSelector)
		v1alpha1DuckTypeGenerator.Template = c.v1alpha1ApplicationSetTemplateToV1alpha1ApplicationSetTemplate((*source).Template)
		mapStringString := make(map[string]string, len((*source).Values))
		for key, value := range (*source).Values {
			mapStringString[key] = value
		}
		v1alpha1DuckTypeGenerator.Values = mapStringString
		pV1alpha1DuckTypeGenerator = &v1alpha1DuckTypeGenerator
	}
	return pV1alpha1DuckTypeGenerator
}
func (c *ConverterImpl) pV1alpha1EnvEntryToPV1alpha1EnvEntry(source *EnvEntry) *v1alpha1.EnvEntry {
	var pV1alpha1EnvEntry *v1alpha1.EnvEntry
	if source != nil {
		var v1alpha1EnvEntry v1alpha1.EnvEntry
		v1alpha1EnvEntry.Name = (*source).Name
		v1alpha1EnvEntry.Value = (*source).Value
		pV1alpha1EnvEntry = &v1alpha1EnvEntry
	}
	return pV1alpha1EnvEntry
}
func (c *ConverterImpl) pV1alpha1GitGeneratorToPV1alpha1GitGenerator(source *GitGenerator) *v1alpha1.GitGenerator {
	var pV1alpha1GitGenerator *v1alpha1.GitGenerator
	if source != nil {
		var v1alpha1GitGenerator v1alpha1.GitGenerator
		v1alpha1GitGenerator.RepoURL = (*source).RepoURL
		var v1alpha1GitDirectoryGeneratorItemList []v1alpha1.GitDirectoryGeneratorItem
		if (*source).Directories != nil {
			v1alpha1GitDirectoryGeneratorItemList = make([]v1alpha1.GitDirectoryGeneratorItem, len((*source).Directories))
			for i := 0; i < len((*source).Directories); i++ {
				v1alpha1GitDirectoryGeneratorItemList[i] = c.v1alpha1GitDirectoryGeneratorItemToV1alpha1GitDirectoryGeneratorItem((*source).Directories[i])
			}
		}
		v1alpha1GitGenerator.Directories = v1alpha1GitDirectoryGeneratorItemList
		var v1alpha1GitFileGeneratorItemList []v1alpha1.GitFileGeneratorItem
		if (*source).Files != nil {
			v1alpha1GitFileGeneratorItemList = make([]v1alpha1.GitFileGeneratorItem, len((*source).Files))
			for j := 0; j < len((*source).Files); j++ {
				v1alpha1GitFileGeneratorItemList[j] = c.v1alpha1GitFileGeneratorItemToV1alpha1GitFileGeneratorItem((*source).Files[j])
			}
		}
		v1alpha1GitGenerator.Files = v1alpha1GitFileGeneratorItemList
		v1alpha1GitGenerator.Revision = (*source).Revision
		var pInt64 *int64
		if (*source).RequeueAfterSeconds != nil {
			xint64 := *(*source).RequeueAfterSeconds
			pInt64 = &xint64
		}
		v1alpha1GitGenerator.RequeueAfterSeconds = pInt64
		v1alpha1GitGenerator.Template = c.v1alpha1ApplicationSetTemplateToV1alpha1ApplicationSetTemplate((*source).Template)
		v1alpha1GitGenerator.PathParamPrefix = (*source).PathParamPrefix
		mapStringString := make(map[string]string, len((*source).Values))
		for key, value := range (*source).Values {
			mapStringString[key] = value
		}
		v1alpha1GitGenerator.Values = mapStringString
		pV1alpha1GitGenerator = &v1alpha1GitGenerator
	}
	return pV1alpha1GitGenerator
}
func (c *ConverterImpl) pV1alpha1ListGeneratorToPV1alpha1ListGenerator(source *ListGenerator) *v1alpha1.ListGenerator {
	var pV1alpha1ListGenerator *v1alpha1.ListGenerator
	if source != nil {
		var v1alpha1ListGenerator v1alpha1.ListGenerator
		var v1JSONList []v1.JSON
		if (*source).Elements != nil {
			v1JSONList = make([]v1.JSON, len((*source).Elements))
			for i := 0; i < len((*source).Elements); i++ {
				v1JSONList[i] = c.v1JSONToV1JSON((*source).Elements[i])
			}
		}
		v1alpha1ListGenerator.Elements = v1JSONList
		v1alpha1ListGenerator.Template = c.v1alpha1ApplicationSetTemplateToV1alpha1ApplicationSetTemplate((*source).Template)
		v1alpha1ListGenerator.ElementsYaml = (*source).ElementsYaml
		pV1alpha1ListGenerator = &v1alpha1ListGenerator
	}
	return pV1alpha1ListGenerator
}
func (c *ConverterImpl) pV1alpha1ManagedNamespaceMetadataToPV1alpha1ManagedNamespaceMetadata(source *ManagedNamespaceMetadata) *v1alpha1.ManagedNamespaceMetadata {
	var pV1alpha1ManagedNamespaceMetadata *v1alpha1.ManagedNamespaceMetadata
	if source != nil {
		var v1alpha1ManagedNamespaceMetadata v1alpha1.ManagedNamespaceMetadata
		mapStringString := make(map[string]string, len((*source).Labels))
		for key, value := range (*source).Labels {
			mapStringString[key] = value
		}
		v1alpha1ManagedNamespaceMetadata.Labels = mapStringString
		mapStringString2 := make(map[string]string, len((*source).Annotations))
		for key2, value2 := range (*source).Annotations {
			mapStringString2[key2] = value2
		}
		v1alpha1ManagedNamespaceMetadata.Annotations = mapStringString2
		pV1alpha1ManagedNamespaceMetadata = &v1alpha1ManagedNamespaceMetadata
	}
	return pV1alpha1ManagedNamespaceMetadata
}
func (c *ConverterImpl) pV1alpha1MatrixGeneratorToPV1alpha1MatrixGenerator(source *MatrixGenerator) *v1alpha1.MatrixGenerator {
	var pV1alpha1MatrixGenerator *v1alpha1.MatrixGenerator
	if source != nil {
		var v1alpha1MatrixGenerator v1alpha1.MatrixGenerator
		var v1alpha1ApplicationSetNestedGeneratorList []v1alpha1.ApplicationSetNestedGenerator
		if (*source).Generators != nil {
			v1alpha1ApplicationSetNestedGeneratorList = make([]v1alpha1.ApplicationSetNestedGenerator, len((*source).Generators))
			for i := 0; i < len((*source).Generators); i++ {
				v1alpha1ApplicationSetNestedGeneratorList[i] = c.v1alpha1ApplicationSetNestedGeneratorToV1alpha1ApplicationSetNestedGenerator((*source).Generators[i])
			}
		}
		v1alpha1MatrixGenerator.Generators = v1alpha1ApplicationSetNestedGeneratorList
		v1alpha1MatrixGenerator.Template = c.v1alpha1ApplicationSetTemplateToV1alpha1ApplicationSetTemplate((*source).Template)
		pV1alpha1MatrixGenerator = &v1alpha1MatrixGenerator
	}
	return pV1alpha1MatrixGenerator
}
func (c *ConverterImpl) pV1alpha1MergeGeneratorToPV1alpha1MergeGenerator(source *MergeGenerator) *v1alpha1.MergeGenerator {
	var pV1alpha1MergeGenerator *v1alpha1.MergeGenerator
	if source != nil {
		var v1alpha1MergeGenerator v1alpha1.MergeGenerator
		var v1alpha1ApplicationSetNestedGeneratorList []v1alpha1.ApplicationSetNestedGenerator
		if (*source).Generators != nil {
			v1alpha1ApplicationSetNestedGeneratorList = make([]v1alpha1.ApplicationSetNestedGenerator, len((*source).Generators))
			for i := 0; i < len((*source).Generators); i++ {
				v1alpha1ApplicationSetNestedGeneratorList[i] = c.v1alpha1ApplicationSetNestedGeneratorToV1alpha1ApplicationSetNestedGenerator((*source).Generators[i])
			}
		}
		v1alpha1MergeGenerator.Generators = v1alpha1ApplicationSetNestedGeneratorList
		var stringList []string
		if (*source).MergeKeys != nil {
			stringList = make([]string, len((*source).MergeKeys))
			for j := 0; j < len((*source).MergeKeys); j++ {
				stringList[j] = (*source).MergeKeys[j]
			}
		}
		v1alpha1MergeGenerator.MergeKeys = stringList
		v1alpha1MergeGenerator.Template = c.v1alpha1ApplicationSetTemplateToV1alpha1ApplicationSetTemplate((*source).Template)
		pV1alpha1MergeGenerator = &v1alpha1MergeGenerator
	}
	return pV1alpha1MergeGenerator
}
func (c *ConverterImpl) pV1alpha1OptionalArrayToPV1alpha1OptionalArray(source *OptionalArray) *v1alpha1.OptionalArray {
	var pV1alpha1OptionalArray *v1alpha1.OptionalArray
	if source != nil {
		var v1alpha1OptionalArray v1alpha1.OptionalArray
		var stringList []string
		if (*source).Array != nil {
			stringList = make([]string, len((*source).Array))
			for i := 0; i < len((*source).Array); i++ {
				stringList[i] = (*source).Array[i]
			}
		}
		v1alpha1OptionalArray.Array = stringList
		pV1alpha1OptionalArray = &v1alpha1OptionalArray
	}
	return pV1alpha1OptionalArray
}
func (c *ConverterImpl) pV1alpha1OptionalMapToPV1alpha1OptionalMap(source *OptionalMap) *v1alpha1.OptionalMap {
	var pV1alpha1OptionalMap *v1alpha1.OptionalMap
	if source != nil {
		var v1alpha1OptionalMap v1alpha1.OptionalMap
		mapStringString := make(map[string]string, len((*source).Map))
		for key, value := range (*source).Map {
			mapStringString[key] = value
		}
		v1alpha1OptionalMap.Map = mapStringString
		pV1alpha1OptionalMap = &v1alpha1OptionalMap
	}
	return pV1alpha1OptionalMap
}
func (c *ConverterImpl) pV1alpha1PluginGeneratorToPV1alpha1PluginGenerator(source *PluginGenerator) *v1alpha1.PluginGenerator {
	var pV1alpha1PluginGenerator *v1alpha1.PluginGenerator
	if source != nil {
		var v1alpha1PluginGenerator v1alpha1.PluginGenerator
		v1alpha1PluginGenerator.ConfigMapRef = c.v1alpha1PluginConfigMapRefToV1alpha1PluginConfigMapRef((*source).ConfigMapRef)
		v1alpha1PluginGenerator.Input = c.v1alpha1PluginInputToV1alpha1PluginInput((*source).Input)
		var pInt64 *int64
		if (*source).RequeueAfterSeconds != nil {
			xint64 := *(*source).RequeueAfterSeconds
			pInt64 = &xint64
		}
		v1alpha1PluginGenerator.RequeueAfterSeconds = pInt64
		v1alpha1PluginGenerator.Template = c.v1alpha1ApplicationSetTemplateToV1alpha1ApplicationSetTemplate((*source).Template)
		mapStringString := make(map[string]string, len((*source).Values))
		for key, value := range (*source).Values {
			mapStringString[key] = value
		}
		v1alpha1PluginGenerator.Values = mapStringString
		pV1alpha1PluginGenerator = &v1alpha1PluginGenerator
	}
	return pV1alpha1PluginGenerator
}
func (c *ConverterImpl) pV1alpha1PullRequestGeneratorAzureDevOpsToPV1alpha1PullRequestGeneratorAzureDevOps(source *PullRequestGeneratorAzureDevOps) *v1alpha1.PullRequestGeneratorAzureDevOps {
	var pV1alpha1PullRequestGeneratorAzureDevOps *v1alpha1.PullRequestGeneratorAzureDevOps
	if source != nil {
		var v1alpha1PullRequestGeneratorAzureDevOps v1alpha1.PullRequestGeneratorAzureDevOps
		v1alpha1PullRequestGeneratorAzureDevOps.Organization = (*source).Organization
		v1alpha1PullRequestGeneratorAzureDevOps.Project = (*source).Project
		v1alpha1PullRequestGeneratorAzureDevOps.Repo = (*source).Repo
		v1alpha1PullRequestGeneratorAzureDevOps.API = (*source).API
		v1alpha1PullRequestGeneratorAzureDevOps.TokenRef = c.pV1alpha1SecretRefToPV1alpha1SecretRef((*source).TokenRef)
		var stringList []string
		if (*source).Labels != nil {
			stringList = make([]string, len((*source).Labels))
			for i := 0; i < len((*source).Labels); i++ {
				stringList[i] = (*source).Labels[i]
			}
		}
		v1alpha1PullRequestGeneratorAzureDevOps.Labels = stringList
		pV1alpha1PullRequestGeneratorAzureDevOps = &v1alpha1PullRequestGeneratorAzureDevOps
	}
	return pV1alpha1PullRequestGeneratorAzureDevOps
}
func (c *ConverterImpl) pV1alpha1PullRequestGeneratorBitbucketServerToPV1alpha1PullRequestGeneratorBitbucketServer(source *PullRequestGeneratorBitbucketServer) *v1alpha1.PullRequestGeneratorBitbucketServer {
	var pV1alpha1PullRequestGeneratorBitbucketServer *v1alpha1.PullRequestGeneratorBitbucketServer
	if source != nil {
		var v1alpha1PullRequestGeneratorBitbucketServer v1alpha1.PullRequestGeneratorBitbucketServer
		v1alpha1PullRequestGeneratorBitbucketServer.Project = (*source).Project
		v1alpha1PullRequestGeneratorBitbucketServer.Repo = (*source).Repo
		v1alpha1PullRequestGeneratorBitbucketServer.API = (*source).API
		v1alpha1PullRequestGeneratorBitbucketServer.BasicAuth = c.pV1alpha1BasicAuthBitbucketServerToPV1alpha1BasicAuthBitbucketServer((*source).BasicAuth)
		pV1alpha1PullRequestGeneratorBitbucketServer = &v1alpha1PullRequestGeneratorBitbucketServer
	}
	return pV1alpha1PullRequestGeneratorBitbucketServer
}
func (c *ConverterImpl) pV1alpha1PullRequestGeneratorBitbucketToPV1alpha1PullRequestGeneratorBitbucket(source *PullRequestGeneratorBitbucket) *v1alpha1.PullRequestGeneratorBitbucket {
	var pV1alpha1PullRequestGeneratorBitbucket *v1alpha1.PullRequestGeneratorBitbucket
	if source != nil {
		var v1alpha1PullRequestGeneratorBitbucket v1alpha1.PullRequestGeneratorBitbucket
		v1alpha1PullRequestGeneratorBitbucket.Owner = (*source).Owner
		v1alpha1PullRequestGeneratorBitbucket.Repo = (*source).Repo
		v1alpha1PullRequestGeneratorBitbucket.API = (*source).API
		v1alpha1PullRequestGeneratorBitbucket.BasicAuth = c.pV1alpha1BasicAuthBitbucketServerToPV1alpha1BasicAuthBitbucketServer((*source).BasicAuth)
		v1alpha1PullRequestGeneratorBitbucket.BearerToken = c.pV1alpha1BearerTokenBitbucketCloudToPV1alpha1BearerTokenBitbucketCloud((*source).BearerToken)
		pV1alpha1PullRequestGeneratorBitbucket = &v1alpha1PullRequestGeneratorBitbucket
	}
	return pV1alpha1PullRequestGeneratorBitbucket
}
func (c *ConverterImpl) pV1alpha1PullRequestGeneratorGitLabToPV1alpha1PullRequestGeneratorGitLab(source *PullRequestGeneratorGitLab) *v1alpha1.PullRequestGeneratorGitLab {
	var pV1alpha1PullRequestGeneratorGitLab *v1alpha1.PullRequestGeneratorGitLab
	if source != nil {
		var v1alpha1PullRequestGeneratorGitLab v1alpha1.PullRequestGeneratorGitLab
		v1alpha1PullRequestGeneratorGitLab.Project = (*source).Project
		v1alpha1PullRequestGeneratorGitLab.API = (*source).API
		v1alpha1PullRequestGeneratorGitLab.TokenRef = c.pV1alpha1SecretRefToPV1alpha1SecretRef((*source).TokenRef)
		var stringList []string
		if (*source).Labels != nil {
			stringList = make([]string, len((*source).Labels))
			for i := 0; i < len((*source).Labels); i++ {
				stringList[i] = (*source).Labels[i]
			}
		}
		v1alpha1PullRequestGeneratorGitLab.Labels = stringList
		v1alpha1PullRequestGeneratorGitLab.PullRequestState = (*source).PullRequestState
		v1alpha1PullRequestGeneratorGitLab.Insecure = (*source).Insecure
		pV1alpha1PullRequestGeneratorGitLab = &v1alpha1PullRequestGeneratorGitLab
	}
	return pV1alpha1PullRequestGeneratorGitLab
}
func (c *ConverterImpl) pV1alpha1PullRequestGeneratorGiteaToPV1alpha1PullRequestGeneratorGitea(source *PullRequestGeneratorGitea) *v1alpha1.PullRequestGeneratorGitea {
	var pV1alpha1PullRequestGeneratorGitea *v1alpha1.PullRequestGeneratorGitea
	if source != nil {
		var v1alpha1PullRequestGeneratorGitea v1alpha1.PullRequestGeneratorGitea
		v1alpha1PullRequestGeneratorGitea.Owner = (*source).Owner
		v1alpha1PullRequestGeneratorGitea.Repo = (*source).Repo
		v1alpha1PullRequestGeneratorGitea.API = (*source).API
		v1alpha1PullRequestGeneratorGitea.TokenRef = c.pV1alpha1SecretRefToPV1alpha1SecretRef((*source).TokenRef)
		v1alpha1PullRequestGeneratorGitea.Insecure = (*source).Insecure
		pV1alpha1PullRequestGeneratorGitea = &v1alpha1PullRequestGeneratorGitea
	}
	return pV1alpha1PullRequestGeneratorGitea
}
func (c *ConverterImpl) pV1alpha1PullRequestGeneratorGithubToPV1alpha1PullRequestGeneratorGithub(source *PullRequestGeneratorGithub) *v1alpha1.PullRequestGeneratorGithub {
	var pV1alpha1PullRequestGeneratorGithub *v1alpha1.PullRequestGeneratorGithub
	if source != nil {
		var v1alpha1PullRequestGeneratorGithub v1alpha1.PullRequestGeneratorGithub
		v1alpha1PullRequestGeneratorGithub.Owner = (*source).Owner
		v1alpha1PullRequestGeneratorGithub.Repo = (*source).Repo
		v1alpha1PullRequestGeneratorGithub.API = (*source).API
		v1alpha1PullRequestGeneratorGithub.TokenRef = c.pV1alpha1SecretRefToPV1alpha1SecretRef((*source).TokenRef)
		v1alpha1PullRequestGeneratorGithub.AppSecretName = (*source).AppSecretName
		var stringList []string
		if (*source).Labels != nil {
			stringList = make([]string, len((*source).Labels))
			for i := 0; i < len((*source).Labels); i++ {
				stringList[i] = (*source).Labels[i]
			}
		}
		v1alpha1PullRequestGeneratorGithub.Labels = stringList
		pV1alpha1PullRequestGeneratorGithub = &v1alpha1PullRequestGeneratorGithub
	}
	return pV1alpha1PullRequestGeneratorGithub
}
func (c *ConverterImpl) pV1alpha1PullRequestGeneratorToPV1alpha1PullRequestGenerator(source *PullRequestGenerator) *v1alpha1.PullRequestGenerator {
	var pV1alpha1PullRequestGenerator *v1alpha1.PullRequestGenerator
	if source != nil {
		var v1alpha1PullRequestGenerator v1alpha1.PullRequestGenerator
		v1alpha1PullRequestGenerator.Github = c.pV1alpha1PullRequestGeneratorGithubToPV1alpha1PullRequestGeneratorGithub((*source).Github)
		v1alpha1PullRequestGenerator.GitLab = c.pV1alpha1PullRequestGeneratorGitLabToPV1alpha1PullRequestGeneratorGitLab((*source).GitLab)
		v1alpha1PullRequestGenerator.Gitea = c.pV1alpha1PullRequestGeneratorGiteaToPV1alpha1PullRequestGeneratorGitea((*source).Gitea)
		v1alpha1PullRequestGenerator.BitbucketServer = c.pV1alpha1PullRequestGeneratorBitbucketServerToPV1alpha1PullRequestGeneratorBitbucketServer((*source).BitbucketServer)
		var v1alpha1PullRequestGeneratorFilterList []v1alpha1.PullRequestGeneratorFilter
		if (*source).Filters != nil {
			v1alpha1PullRequestGeneratorFilterList = make([]v1alpha1.PullRequestGeneratorFilter, len((*source).Filters))
			for i := 0; i < len((*source).Filters); i++ {
				v1alpha1PullRequestGeneratorFilterList[i] = c.v1alpha1PullRequestGeneratorFilterToV1alpha1PullRequestGeneratorFilter((*source).Filters[i])
			}
		}
		v1alpha1PullRequestGenerator.Filters = v1alpha1PullRequestGeneratorFilterList
		var pInt64 *int64
		if (*source).RequeueAfterSeconds != nil {
			xint64 := *(*source).RequeueAfterSeconds
			pInt64 = &xint64
		}
		v1alpha1PullRequestGenerator.RequeueAfterSeconds = pInt64
		v1alpha1PullRequestGenerator.Template = c.v1alpha1ApplicationSetTemplateToV1alpha1ApplicationSetTemplate((*source).Template)
		v1alpha1PullRequestGenerator.Bitbucket = c.pV1alpha1PullRequestGeneratorBitbucketToPV1alpha1PullRequestGeneratorBitbucket((*source).Bitbucket)
		v1alpha1PullRequestGenerator.AzureDevOps = c.pV1alpha1PullRequestGeneratorAzureDevOpsToPV1alpha1PullRequestGeneratorAzureDevOps((*source).AzureDevOps)
		pV1alpha1PullRequestGenerator = &v1alpha1PullRequestGenerator
	}
	return pV1alpha1PullRequestGenerator
}
func (c *ConverterImpl) pV1alpha1RetryStrategyToPV1alpha1RetryStrategy(source *RetryStrategy) *v1alpha1.RetryStrategy {
	var pV1alpha1RetryStrategy *v1alpha1.RetryStrategy
	if source != nil {
		var v1alpha1RetryStrategy v1alpha1.RetryStrategy
		var xint64 int64
		if (*source).Limit != nil {
			xint64 = *(*source).Limit
		}
		v1alpha1RetryStrategy.Limit = xint64
		v1alpha1RetryStrategy.Backoff = c.pV1alpha1BackoffToPV1alpha1Backoff((*source).Backoff)
		pV1alpha1RetryStrategy = &v1alpha1RetryStrategy
	}
	return pV1alpha1RetryStrategy
}
func (c *ConverterImpl) pV1alpha1SCMProviderGeneratorAWSCodeCommitToPV1alpha1SCMProviderGeneratorAWSCodeCommit(source *SCMProviderGeneratorAWSCodeCommit) *v1alpha1.SCMProviderGeneratorAWSCodeCommit {
	var pV1alpha1SCMProviderGeneratorAWSCodeCommit *v1alpha1.SCMProviderGeneratorAWSCodeCommit
	if source != nil {
		var v1alpha1SCMProviderGeneratorAWSCodeCommit v1alpha1.SCMProviderGeneratorAWSCodeCommit
		var pV1alpha1TagFilterList []*v1alpha1.TagFilter
		if (*source).TagFilters != nil {
			pV1alpha1TagFilterList = make([]*v1alpha1.TagFilter, len((*source).TagFilters))
			for i := 0; i < len((*source).TagFilters); i++ {
				pV1alpha1TagFilterList[i] = c.pV1alpha1TagFilterToPV1alpha1TagFilter((*source).TagFilters[i])
			}
		}
		v1alpha1SCMProviderGeneratorAWSCodeCommit.TagFilters = pV1alpha1TagFilterList
		v1alpha1SCMProviderGeneratorAWSCodeCommit.Role = (*source).Role
		v1alpha1SCMProviderGeneratorAWSCodeCommit.Region = (*source).Region
		v1alpha1SCMProviderGeneratorAWSCodeCommit.AllBranches = (*source).AllBranches
		pV1alpha1SCMProviderGeneratorAWSCodeCommit = &v1alpha1SCMProviderGeneratorAWSCodeCommit
	}
	return pV1alpha1SCMProviderGeneratorAWSCodeCommit
}
func (c *ConverterImpl) pV1alpha1SCMProviderGeneratorAzureDevOpsToPV1alpha1SCMProviderGeneratorAzureDevOps(source *SCMProviderGeneratorAzureDevOps) *v1alpha1.SCMProviderGeneratorAzureDevOps {
	var pV1alpha1SCMProviderGeneratorAzureDevOps *v1alpha1.SCMProviderGeneratorAzureDevOps
	if source != nil {
		var v1alpha1SCMProviderGeneratorAzureDevOps v1alpha1.SCMProviderGeneratorAzureDevOps
		v1alpha1SCMProviderGeneratorAzureDevOps.Organization = (*source).Organization
		v1alpha1SCMProviderGeneratorAzureDevOps.API = (*source).API
		v1alpha1SCMProviderGeneratorAzureDevOps.TeamProject = (*source).TeamProject
		v1alpha1SCMProviderGeneratorAzureDevOps.AccessTokenRef = c.pV1alpha1SecretRefToPV1alpha1SecretRef((*source).AccessTokenRef)
		v1alpha1SCMProviderGeneratorAzureDevOps.AllBranches = (*source).AllBranches
		pV1alpha1SCMProviderGeneratorAzureDevOps = &v1alpha1SCMProviderGeneratorAzureDevOps
	}
	return pV1alpha1SCMProviderGeneratorAzureDevOps
}
func (c *ConverterImpl) pV1alpha1SCMProviderGeneratorBitbucketServerToPV1alpha1SCMProviderGeneratorBitbucketServer(source *SCMProviderGeneratorBitbucketServer) *v1alpha1.SCMProviderGeneratorBitbucketServer {
	var pV1alpha1SCMProviderGeneratorBitbucketServer *v1alpha1.SCMProviderGeneratorBitbucketServer
	if source != nil {
		var v1alpha1SCMProviderGeneratorBitbucketServer v1alpha1.SCMProviderGeneratorBitbucketServer
		v1alpha1SCMProviderGeneratorBitbucketServer.Project = (*source).Project
		v1alpha1SCMProviderGeneratorBitbucketServer.API = (*source).API
		v1alpha1SCMProviderGeneratorBitbucketServer.BasicAuth = c.pV1alpha1BasicAuthBitbucketServerToPV1alpha1BasicAuthBitbucketServer((*source).BasicAuth)
		v1alpha1SCMProviderGeneratorBitbucketServer.AllBranches = (*source).AllBranches
		pV1alpha1SCMProviderGeneratorBitbucketServer = &v1alpha1SCMProviderGeneratorBitbucketServer
	}
	return pV1alpha1SCMProviderGeneratorBitbucketServer
}
func (c *ConverterImpl) pV1alpha1SCMProviderGeneratorBitbucketToPV1alpha1SCMProviderGeneratorBitbucket(source *SCMProviderGeneratorBitbucket) *v1alpha1.SCMProviderGeneratorBitbucket {
	var pV1alpha1SCMProviderGeneratorBitbucket *v1alpha1.SCMProviderGeneratorBitbucket
	if source != nil {
		var v1alpha1SCMProviderGeneratorBitbucket v1alpha1.SCMProviderGeneratorBitbucket
		v1alpha1SCMProviderGeneratorBitbucket.Owner = (*source).Owner
		v1alpha1SCMProviderGeneratorBitbucket.User = (*source).User
		v1alpha1SCMProviderGeneratorBitbucket.AppPasswordRef = c.pV1alpha1SecretRefToPV1alpha1SecretRef((*source).AppPasswordRef)
		v1alpha1SCMProviderGeneratorBitbucket.AllBranches = (*source).AllBranches
		pV1alpha1SCMProviderGeneratorBitbucket = &v1alpha1SCMProviderGeneratorBitbucket
	}
	return pV1alpha1SCMProviderGeneratorBitbucket
}
func (c *ConverterImpl) pV1alpha1SCMProviderGeneratorGiteaToPV1alpha1SCMProviderGeneratorGitea(source *SCMProviderGeneratorGitea) *v1alpha1.SCMProviderGeneratorGitea {
	var pV1alpha1SCMProviderGeneratorGitea *v1alpha1.SCMProviderGeneratorGitea
	if source != nil {
		var v1alpha1SCMProviderGeneratorGitea v1alpha1.SCMProviderGeneratorGitea
		v1alpha1SCMProviderGeneratorGitea.Owner = (*source).Owner
		v1alpha1SCMProviderGeneratorGitea.API = (*source).API
		v1alpha1SCMProviderGeneratorGitea.TokenRef = c.pV1alpha1SecretRefToPV1alpha1SecretRef((*source).TokenRef)
		v1alpha1SCMProviderGeneratorGitea.AllBranches = (*source).AllBranches
		v1alpha1SCMProviderGeneratorGitea.Insecure = (*source).Insecure
		pV1alpha1SCMProviderGeneratorGitea = &v1alpha1SCMProviderGeneratorGitea
	}
	return pV1alpha1SCMProviderGeneratorGitea
}
func (c *ConverterImpl) pV1alpha1SCMProviderGeneratorGithubToPV1alpha1SCMProviderGeneratorGithub(source *SCMProviderGeneratorGithub) *v1alpha1.SCMProviderGeneratorGithub {
	var pV1alpha1SCMProviderGeneratorGithub *v1alpha1.SCMProviderGeneratorGithub
	if source != nil {
		var v1alpha1SCMProviderGeneratorGithub v1alpha1.SCMProviderGeneratorGithub
		v1alpha1SCMProviderGeneratorGithub.Organization = (*source).Organization
		v1alpha1SCMProviderGeneratorGithub.API = (*source).API
		v1alpha1SCMProviderGeneratorGithub.TokenRef = c.pV1alpha1SecretRefToPV1alpha1SecretRef((*source).TokenRef)
		v1alpha1SCMProviderGeneratorGithub.AppSecretName = (*source).AppSecretName
		v1alpha1SCMProviderGeneratorGithub.AllBranches = (*source).AllBranches
		pV1alpha1SCMProviderGeneratorGithub = &v1alpha1SCMProviderGeneratorGithub
	}
	return pV1alpha1SCMProviderGeneratorGithub
}
func (c *ConverterImpl) pV1alpha1SCMProviderGeneratorGitlabToPV1alpha1SCMProviderGeneratorGitlab(source *SCMProviderGeneratorGitlab) *v1alpha1.SCMProviderGeneratorGitlab {
	var pV1alpha1SCMProviderGeneratorGitlab *v1alpha1.SCMProviderGeneratorGitlab
	if source != nil {
		var v1alpha1SCMProviderGeneratorGitlab v1alpha1.SCMProviderGeneratorGitlab
		v1alpha1SCMProviderGeneratorGitlab.Group = (*source).Group
		v1alpha1SCMProviderGeneratorGitlab.IncludeSubgroups = (*source).IncludeSubgroups
		v1alpha1SCMProviderGeneratorGitlab.API = (*source).API
		v1alpha1SCMProviderGeneratorGitlab.TokenRef = c.pV1alpha1SecretRefToPV1alpha1SecretRef((*source).TokenRef)
		v1alpha1SCMProviderGeneratorGitlab.AllBranches = (*source).AllBranches
		v1alpha1SCMProviderGeneratorGitlab.Insecure = (*source).Insecure
		pV1alpha1SCMProviderGeneratorGitlab = &v1alpha1SCMProviderGeneratorGitlab
	}
	return pV1alpha1SCMProviderGeneratorGitlab
}
func (c *ConverterImpl) pV1alpha1SCMProviderGeneratorToPV1alpha1SCMProviderGenerator(source *SCMProviderGenerator) *v1alpha1.SCMProviderGenerator {
	var pV1alpha1SCMProviderGenerator *v1alpha1.SCMProviderGenerator
	if source != nil {
		var v1alpha1SCMProviderGenerator v1alpha1.SCMProviderGenerator
		v1alpha1SCMProviderGenerator.Github = c.pV1alpha1SCMProviderGeneratorGithubToPV1alpha1SCMProviderGeneratorGithub((*source).Github)
		v1alpha1SCMProviderGenerator.Gitlab = c.pV1alpha1SCMProviderGeneratorGitlabToPV1alpha1SCMProviderGeneratorGitlab((*source).Gitlab)
		v1alpha1SCMProviderGenerator.Bitbucket = c.pV1alpha1SCMProviderGeneratorBitbucketToPV1alpha1SCMProviderGeneratorBitbucket((*source).Bitbucket)
		v1alpha1SCMProviderGenerator.BitbucketServer = c.pV1alpha1SCMProviderGeneratorBitbucketServerToPV1alpha1SCMProviderGeneratorBitbucketServer((*source).BitbucketServer)
		v1alpha1SCMProviderGenerator.Gitea = c.pV1alpha1SCMProviderGeneratorGiteaToPV1alpha1SCMProviderGeneratorGitea((*source).Gitea)
		v1alpha1SCMProviderGenerator.AzureDevOps = c.pV1alpha1SCMProviderGeneratorAzureDevOpsToPV1alpha1SCMProviderGeneratorAzureDevOps((*source).AzureDevOps)
		var v1alpha1SCMProviderGeneratorFilterList []v1alpha1.SCMProviderGeneratorFilter
		if (*source).Filters != nil {
			v1alpha1SCMProviderGeneratorFilterList = make([]v1alpha1.SCMProviderGeneratorFilter, len((*source).Filters))
			for i := 0; i < len((*source).Filters); i++ {
				v1alpha1SCMProviderGeneratorFilterList[i] = c.v1alpha1SCMProviderGeneratorFilterToV1alpha1SCMProviderGeneratorFilter((*source).Filters[i])
			}
		}
		v1alpha1SCMProviderGenerator.Filters = v1alpha1SCMProviderGeneratorFilterList
		v1alpha1SCMProviderGenerator.CloneProtocol = (*source).CloneProtocol
		var pInt64 *int64
		if (*source).RequeueAfterSeconds != nil {
			xint64 := *(*source).RequeueAfterSeconds
			pInt64 = &xint64
		}
		v1alpha1SCMProviderGenerator.RequeueAfterSeconds = pInt64
		v1alpha1SCMProviderGenerator.Template = c.v1alpha1ApplicationSetTemplateToV1alpha1ApplicationSetTemplate((*source).Template)
		mapStringString := make(map[string]string, len((*source).Values))
		for key, value := range (*source).Values {
			mapStringString[key] = value
		}
		v1alpha1SCMProviderGenerator.Values = mapStringString
		v1alpha1SCMProviderGenerator.AWSCodeCommit = c.pV1alpha1SCMProviderGeneratorAWSCodeCommitToPV1alpha1SCMProviderGeneratorAWSCodeCommit((*source).AWSCodeCommit)
		pV1alpha1SCMProviderGenerator = &v1alpha1SCMProviderGenerator
	}
	return pV1alpha1SCMProviderGenerator
}
func (c *ConverterImpl) pV1alpha1SecretRefToPV1alpha1SecretRef(source *SecretRef) *v1alpha1.SecretRef {
	var pV1alpha1SecretRef *v1alpha1.SecretRef
	if source != nil {
		var v1alpha1SecretRef v1alpha1.SecretRef
		v1alpha1SecretRef.SecretName = (*source).SecretName
		v1alpha1SecretRef.Key = (*source).Key
		pV1alpha1SecretRef = &v1alpha1SecretRef
	}
	return pV1alpha1SecretRef
}
func (c *ConverterImpl) pV1alpha1SyncPolicyAutomatedToPV1alpha1SyncPolicyAutomated(source *SyncPolicyAutomated) *v1alpha1.SyncPolicyAutomated {
	var pV1alpha1SyncPolicyAutomated *v1alpha1.SyncPolicyAutomated
	if source != nil {
		var v1alpha1SyncPolicyAutomated v1alpha1.SyncPolicyAutomated
		var xbool bool
		if (*source).Prune != nil {
			xbool = *(*source).Prune
		}
		v1alpha1SyncPolicyAutomated.Prune = xbool
		var xbool2 bool
		if (*source).SelfHeal != nil {
			xbool2 = *(*source).SelfHeal
		}
		v1alpha1SyncPolicyAutomated.SelfHeal = xbool2
		var xbool3 bool
		if (*source).AllowEmpty != nil {
			xbool3 = *(*source).AllowEmpty
		}
		v1alpha1SyncPolicyAutomated.AllowEmpty = xbool3
		pV1alpha1SyncPolicyAutomated = &v1alpha1SyncPolicyAutomated
	}
	return pV1alpha1SyncPolicyAutomated
}
func (c *ConverterImpl) pV1alpha1SyncPolicyToPV1alpha1SyncPolicy(source *SyncPolicy) *v1alpha1.SyncPolicy {
	var pV1alpha1SyncPolicy *v1alpha1.SyncPolicy
	if source != nil {
		var v1alpha1SyncPolicy v1alpha1.SyncPolicy
		v1alpha1SyncPolicy.Automated = c.pV1alpha1SyncPolicyAutomatedToPV1alpha1SyncPolicyAutomated((*source).Automated)
		v1alpha1SyncPolicy.SyncOptions = c.v1alpha1SyncOptionsToV1alpha1SyncOptions((*source).SyncOptions)
		v1alpha1SyncPolicy.Retry = c.pV1alpha1RetryStrategyToPV1alpha1RetryStrategy((*source).Retry)
		v1alpha1SyncPolicy.ManagedNamespaceMetadata = c.pV1alpha1ManagedNamespaceMetadataToPV1alpha1ManagedNamespaceMetadata((*source).ManagedNamespaceMetadata)
		pV1alpha1SyncPolicy = &v1alpha1SyncPolicy
	}
	return pV1alpha1SyncPolicy
}
func (c *ConverterImpl) pV1alpha1TagFilterToPV1alpha1TagFilter(source *TagFilter) *v1alpha1.TagFilter {
	var pV1alpha1TagFilter *v1alpha1.TagFilter
	if source != nil {
		var v1alpha1TagFilter v1alpha1.TagFilter
		v1alpha1TagFilter.Key = (*source).Key
		v1alpha1TagFilter.Value = (*source).Value
		pV1alpha1TagFilter = &v1alpha1TagFilter
	}
	return pV1alpha1TagFilter
}
func (c *ConverterImpl) v1JSONToV1JSON(source v1.JSON) v1.JSON {
	var v1JSON v1.JSON
	var byteList []uint8
	if source.Raw != nil {
		byteList = make([]uint8, len(source.Raw))
		for i := 0; i < len(source.Raw); i++ {
			byteList[i] = source.Raw[i]
		}
	}
	v1JSON.Raw = byteList
	return v1JSON
}
func (c *ConverterImpl) v1LabelSelectorRequirementToV1LabelSelectorRequirement(source v11.LabelSelectorRequirement) v11.LabelSelectorRequirement {
	var v1LabelSelectorRequirement v11.LabelSelectorRequirement
	v1LabelSelectorRequirement.Key = source.Key
	v1LabelSelectorRequirement.Operator = v11.LabelSelectorOperator(source.Operator)
	var stringList []string
	if source.Values != nil {
		stringList = make([]string, len(source.Values))
		for i := 0; i < len(source.Values); i++ {
			stringList[i] = source.Values[i]
		}
	}
	v1LabelSelectorRequirement.Values = stringList
	return v1LabelSelectorRequirement
}
func (c *ConverterImpl) v1LabelSelectorToV1LabelSelector(source v11.LabelSelector) v11.LabelSelector {
	var v1LabelSelector v11.LabelSelector
	mapStringString := make(map[string]string, len(source.MatchLabels))
	for key, value := range source.MatchLabels {
		mapStringString[key] = value
	}
	v1LabelSelector.MatchLabels = mapStringString
	var v1LabelSelectorRequirementList []v11.LabelSelectorRequirement
	if source.MatchExpressions != nil {
		v1LabelSelectorRequirementList = make([]v11.LabelSelectorRequirement, len(source.MatchExpressions))
		for i := 0; i < len(source.MatchExpressions); i++ {
			v1LabelSelectorRequirementList[i] = c.v1LabelSelectorRequirementToV1LabelSelectorRequirement(source.MatchExpressions[i])
		}
	}
	v1LabelSelector.MatchExpressions = v1LabelSelectorRequirementList
	return v1LabelSelector
}
func (c *ConverterImpl) v1alpha1ApplicationDestinationToV1alpha1ApplicationDestination(source ApplicationDestination) v1alpha1.ApplicationDestination {
	var v1alpha1ApplicationDestination v1alpha1.ApplicationDestination
	var xstring string
	if source.Server != nil {
		xstring = *source.Server
	}
	v1alpha1ApplicationDestination.Server = xstring
	var xstring2 string
	if source.Namespace != nil {
		xstring2 = *source.Namespace
	}
	v1alpha1ApplicationDestination.Namespace = xstring2
	var xstring3 string
	if source.Name != nil {
		xstring3 = *source.Name
	}
	v1alpha1ApplicationDestination.Name = xstring3
	return v1alpha1ApplicationDestination
}
func (c *ConverterImpl) v1alpha1ApplicationMatchExpressionToV1alpha1ApplicationMatchExpression(source ApplicationMatchExpression) v1alpha1.ApplicationMatchExpression {
	var v1alpha1ApplicationMatchExpression v1alpha1.ApplicationMatchExpression
	v1alpha1ApplicationMatchExpression.Key = source.Key
	v1alpha1ApplicationMatchExpression.Operator = source.Operator
	var stringList []string
	if source.Values != nil {
		stringList = make([]string, len(source.Values))
		for i := 0; i < len(source.Values); i++ {
			stringList[i] = source.Values[i]
		}
	}
	v1alpha1ApplicationMatchExpression.Values = stringList
	return v1alpha1ApplicationMatchExpression
}
func (c *ConverterImpl) v1alpha1ApplicationSetGeneratorToV1alpha1ApplicationSetGenerator(source ApplicationSetGenerator) v1alpha1.ApplicationSetGenerator {
	var v1alpha1ApplicationSetGenerator v1alpha1.ApplicationSetGenerator
	v1alpha1ApplicationSetGenerator.List = c.pV1alpha1ListGeneratorToPV1alpha1ListGenerator(source.List)
	v1alpha1ApplicationSetGenerator.Clusters = c.pV1alpha1ClusterGeneratorToPV1alpha1ClusterGenerator(source.Clusters)
	v1alpha1ApplicationSetGenerator.Git = c.pV1alpha1GitGeneratorToPV1alpha1GitGenerator(source.Git)
	v1alpha1ApplicationSetGenerator.SCMProvider = c.pV1alpha1SCMProviderGeneratorToPV1alpha1SCMProviderGenerator(source.SCMProvider)
	v1alpha1ApplicationSetGenerator.ClusterDecisionResource = c.pV1alpha1DuckTypeGeneratorToPV1alpha1DuckTypeGenerator(source.ClusterDecisionResource)
	v1alpha1ApplicationSetGenerator.PullRequest = c.pV1alpha1PullRequestGeneratorToPV1alpha1PullRequestGenerator(source.PullRequest)
	v1alpha1ApplicationSetGenerator.Matrix = c.pV1alpha1MatrixGeneratorToPV1alpha1MatrixGenerator(source.Matrix)
	v1alpha1ApplicationSetGenerator.Merge = c.pV1alpha1MergeGeneratorToPV1alpha1MergeGenerator(source.Merge)
	v1alpha1ApplicationSetGenerator.Selector = c.pV1LabelSelectorToPV1LabelSelector(source.Selector)
	v1alpha1ApplicationSetGenerator.Plugin = c.pV1alpha1PluginGeneratorToPV1alpha1PluginGenerator(source.Plugin)
	return v1alpha1ApplicationSetGenerator
}
func (c *ConverterImpl) v1alpha1ApplicationSetNestedGeneratorToV1alpha1ApplicationSetNestedGenerator(source ApplicationSetNestedGenerator) v1alpha1.ApplicationSetNestedGenerator {
	var v1alpha1ApplicationSetNestedGenerator v1alpha1.ApplicationSetNestedGenerator
	v1alpha1ApplicationSetNestedGenerator.List = c.pV1alpha1ListGeneratorToPV1alpha1ListGenerator(source.List)
	v1alpha1ApplicationSetNestedGenerator.Clusters = c.pV1alpha1ClusterGeneratorToPV1alpha1ClusterGenerator(source.Clusters)
	v1alpha1ApplicationSetNestedGenerator.Git = c.pV1alpha1GitGeneratorToPV1alpha1GitGenerator(source.Git)
	v1alpha1ApplicationSetNestedGenerator.SCMProvider = c.pV1alpha1SCMProviderGeneratorToPV1alpha1SCMProviderGenerator(source.SCMProvider)
	v1alpha1ApplicationSetNestedGenerator.ClusterDecisionResource = c.pV1alpha1DuckTypeGeneratorToPV1alpha1DuckTypeGenerator(source.ClusterDecisionResource)
	v1alpha1ApplicationSetNestedGenerator.PullRequest = c.pV1alpha1PullRequestGeneratorToPV1alpha1PullRequestGenerator(source.PullRequest)
	v1alpha1ApplicationSetNestedGenerator.Matrix = c.pV1JSONToPV1JSON(source.Matrix)
	v1alpha1ApplicationSetNestedGenerator.Merge = c.pV1JSONToPV1JSON(source.Merge)
	v1alpha1ApplicationSetNestedGenerator.Selector = c.pV1LabelSelectorToPV1LabelSelector(source.Selector)
	v1alpha1ApplicationSetNestedGenerator.Plugin = c.pV1alpha1PluginGeneratorToPV1alpha1PluginGenerator(source.Plugin)
	return v1alpha1ApplicationSetNestedGenerator
}
func (c *ConverterImpl) v1alpha1ApplicationSetRolloutStepToV1alpha1ApplicationSetRolloutStep(source ApplicationSetRolloutStep) v1alpha1.ApplicationSetRolloutStep {
	var v1alpha1ApplicationSetRolloutStep v1alpha1.ApplicationSetRolloutStep
	var v1alpha1ApplicationMatchExpressionList []v1alpha1.ApplicationMatchExpression
	if source.MatchExpressions != nil {
		v1alpha1ApplicationMatchExpressionList = make([]v1alpha1.ApplicationMatchExpression, len(source.MatchExpressions))
		for i := 0; i < len(source.MatchExpressions); i++ {
			v1alpha1ApplicationMatchExpressionList[i] = c.v1alpha1ApplicationMatchExpressionToV1alpha1ApplicationMatchExpression(source.MatchExpressions[i])
		}
	}
	v1alpha1ApplicationSetRolloutStep.MatchExpressions = v1alpha1ApplicationMatchExpressionList
	v1alpha1ApplicationSetRolloutStep.MaxUpdate = c.pIntstrIntOrStringToPIntstrIntOrString(source.MaxUpdate)
	return v1alpha1ApplicationSetRolloutStep
}
func (c *ConverterImpl) v1alpha1ApplicationSetTemplateMetaToV1alpha1ApplicationSetTemplateMeta(source ApplicationSetTemplateMeta) v1alpha1.ApplicationSetTemplateMeta {
	var v1alpha1ApplicationSetTemplateMeta v1alpha1.ApplicationSetTemplateMeta
	v1alpha1ApplicationSetTemplateMeta.Name = source.Name
	v1alpha1ApplicationSetTemplateMeta.Namespace = source.Namespace
	mapStringString := make(map[string]string, len(source.Labels))
	for key, value := range source.Labels {
		mapStringString[key] = value
	}
	v1alpha1ApplicationSetTemplateMeta.Labels = mapStringString
	mapStringString2 := make(map[string]string, len(source.Annotations))
	for key2, value2 := range source.Annotations {
		mapStringString2[key2] = value2
	}
	v1alpha1ApplicationSetTemplateMeta.Annotations = mapStringString2
	var stringList []string
	if source.Finalizers != nil {
		stringList = make([]string, len(source.Finalizers))
		for i := 0; i < len(source.Finalizers); i++ {
			stringList[i] = source.Finalizers[i]
		}
	}
	v1alpha1ApplicationSetTemplateMeta.Finalizers = stringList
	return v1alpha1ApplicationSetTemplateMeta
}
func (c *ConverterImpl) v1alpha1ApplicationSetTemplateToV1alpha1ApplicationSetTemplate(source ApplicationSetTemplate) v1alpha1.ApplicationSetTemplate {
	var v1alpha1ApplicationSetTemplate v1alpha1.ApplicationSetTemplate
	v1alpha1ApplicationSetTemplate.ApplicationSetTemplateMeta = c.v1alpha1ApplicationSetTemplateMetaToV1alpha1ApplicationSetTemplateMeta(source.ApplicationSetTemplateMeta)
	v1alpha1ApplicationSetTemplate.Spec = c.v1alpha1ApplicationSpecToV1alpha1ApplicationSpec(source.Spec)
	return v1alpha1ApplicationSetTemplate
}
func (c *ConverterImpl) v1alpha1ApplicationSourceJsonnetToV1alpha1ApplicationSourceJsonnet(source ApplicationSourceJsonnet) v1alpha1.ApplicationSourceJsonnet {
	var v1alpha1ApplicationSourceJsonnet v1alpha1.ApplicationSourceJsonnet
	var v1alpha1JsonnetVarList []v1alpha1.JsonnetVar
	if source.ExtVars != nil {
		v1alpha1JsonnetVarList = make([]v1alpha1.JsonnetVar, len(source.ExtVars))
		for i := 0; i < len(source.ExtVars); i++ {
			v1alpha1JsonnetVarList[i] = c.v1alpha1JsonnetVarToV1alpha1JsonnetVar(source.ExtVars[i])
		}
	}
	v1alpha1ApplicationSourceJsonnet.ExtVars = v1alpha1JsonnetVarList
	var v1alpha1JsonnetVarList2 []v1alpha1.JsonnetVar
	if source.TLAs != nil {
		v1alpha1JsonnetVarList2 = make([]v1alpha1.JsonnetVar, len(source.TLAs))
		for j := 0; j < len(source.TLAs); j++ {
			v1alpha1JsonnetVarList2[j] = c.v1alpha1JsonnetVarToV1alpha1JsonnetVar(source.TLAs[j])
		}
	}
	v1alpha1ApplicationSourceJsonnet.TLAs = v1alpha1JsonnetVarList2
	var stringList []string
	if source.Libs != nil {
		stringList = make([]string, len(source.Libs))
		for k := 0; k < len(source.Libs); k++ {
			stringList[k] = source.Libs[k]
		}
	}
	v1alpha1ApplicationSourceJsonnet.Libs = stringList
	return v1alpha1ApplicationSourceJsonnet
}
func (c *ConverterImpl) v1alpha1ApplicationSourcePluginParameterToV1alpha1ApplicationSourcePluginParameter(source ApplicationSourcePluginParameter) v1alpha1.ApplicationSourcePluginParameter {
	var v1alpha1ApplicationSourcePluginParameter v1alpha1.ApplicationSourcePluginParameter
	var xstring string
	if source.Name != nil {
		xstring = *source.Name
	}
	v1alpha1ApplicationSourcePluginParameter.Name = xstring
	var pString *string
	if source.String_ != nil {
		xstring2 := *source.String_
		pString = &xstring2
	}
	v1alpha1ApplicationSourcePluginParameter.String_ = pString
	v1alpha1ApplicationSourcePluginParameter.OptionalMap = c.pV1alpha1OptionalMapToPV1alpha1OptionalMap(source.OptionalMap)
	v1alpha1ApplicationSourcePluginParameter.OptionalArray = c.pV1alpha1OptionalArrayToPV1alpha1OptionalArray(source.OptionalArray)
	return v1alpha1ApplicationSourcePluginParameter
}
func (c *ConverterImpl) v1alpha1ApplicationSourcePluginParametersToV1alpha1ApplicationSourcePluginParameters(source ApplicationSourcePluginParameters) v1alpha1.ApplicationSourcePluginParameters {
	var v1alpha1ApplicationSourcePluginParameters v1alpha1.ApplicationSourcePluginParameters
	if source != nil {
		v1alpha1ApplicationSourcePluginParameters = make(v1alpha1.ApplicationSourcePluginParameters, len(source))
		for i := 0; i < len(source); i++ {
			v1alpha1ApplicationSourcePluginParameters[i] = c.v1alpha1ApplicationSourcePluginParameterToV1alpha1ApplicationSourcePluginParameter(source[i])
		}
	}
	return v1alpha1ApplicationSourcePluginParameters
}
func (c *ConverterImpl) v1alpha1ApplicationSourcesToV1alpha1ApplicationSources(source ApplicationSources) v1alpha1.ApplicationSources {
	var v1alpha1ApplicationSources v1alpha1.ApplicationSources
	if source != nil {
		v1alpha1ApplicationSources = make(v1alpha1.ApplicationSources, len(source))
		for i := 0; i < len(source); i++ {
			var v1alpha1ApplicationSource v1alpha1.ApplicationSource
			v1alpha1ApplicationSource.RepoURL = source[i].RepoURL
			var xstring string
			if source[i].Path != nil {
				xstring = *source[i].Path
			}
			v1alpha1ApplicationSource.Path = xstring
			var xstring2 string
			if source[i].TargetRevision != nil {
				xstring2 = *source[i].TargetRevision
			}
			v1alpha1ApplicationSource.TargetRevision = xstring2
			v1alpha1ApplicationSource.Helm = c.pV1alpha1ApplicationSourceHelmToPV1alpha1ApplicationSourceHelm(source[i].Helm)
			v1alpha1ApplicationSource.Kustomize = c.pV1alpha1ApplicationSourceKustomizeToPV1alpha1ApplicationSourceKustomize(source[i].Kustomize)
			v1alpha1ApplicationSource.Directory = c.pV1alpha1ApplicationSourceDirectoryToPV1alpha1ApplicationSourceDirectory(source[i].Directory)
			v1alpha1ApplicationSource.Plugin = c.pV1alpha1ApplicationSourcePluginToPV1alpha1ApplicationSourcePlugin(source[i].Plugin)
			var xstring3 string
			if source[i].Chart != nil {
				xstring3 = *source[i].Chart
			}
			v1alpha1ApplicationSource.Chart = xstring3
			var xstring4 string
			if source[i].Ref != nil {
				xstring4 = *source[i].Ref
			}
			v1alpha1ApplicationSource.Ref = xstring4
			v1alpha1ApplicationSources[i] = v1alpha1ApplicationSource
		}
	}
	return v1alpha1ApplicationSources
}
func (c *ConverterImpl) v1alpha1ApplicationSpecToV1alpha1ApplicationSpec(source ApplicationSpec) v1alpha1.ApplicationSpec {
	var v1alpha1ApplicationSpec v1alpha1.ApplicationSpec
	v1alpha1ApplicationSpec.Source = c.pV1alpha1ApplicationSourceToPV1alpha1ApplicationSource(source.Source)
	v1alpha1ApplicationSpec.Destination = c.v1alpha1ApplicationDestinationToV1alpha1ApplicationDestination(source.Destination)
	v1alpha1ApplicationSpec.Project = source.Project
	v1alpha1ApplicationSpec.SyncPolicy = c.pV1alpha1SyncPolicyToPV1alpha1SyncPolicy(source.SyncPolicy)
	v1alpha1ApplicationSpec.IgnoreDifferences = c.v1alpha1ResourceIgnoreDifferencesListToV1alpha1IgnoreDifferences(source.IgnoreDifferences)
	var v1alpha1InfoList []v1alpha1.Info
	if source.Info != nil {
		v1alpha1InfoList = make([]v1alpha1.Info, len(source.Info))
		for i := 0; i < len(source.Info); i++ {
			v1alpha1InfoList[i] = c.v1alpha1InfoToV1alpha1Info(source.Info[i])
		}
	}
	v1alpha1ApplicationSpec.Info = v1alpha1InfoList
	var pInt64 *int64
	if source.RevisionHistoryLimit != nil {
		xint64 := *source.RevisionHistoryLimit
		pInt64 = &xint64
	}
	v1alpha1ApplicationSpec.RevisionHistoryLimit = pInt64
	v1alpha1ApplicationSpec.Sources = c.v1alpha1ApplicationSourcesToV1alpha1ApplicationSources(source.Sources)
	return v1alpha1ApplicationSpec
}
func (c *ConverterImpl) v1alpha1EnvToV1alpha1Env(source Env) v1alpha1.Env {
	var v1alpha1Env v1alpha1.Env
	if source != nil {
		v1alpha1Env = make(v1alpha1.Env, len(source))
		for i := 0; i < len(source); i++ {
			v1alpha1Env[i] = c.pV1alpha1EnvEntryToPV1alpha1EnvEntry(source[i])
		}
	}
	return v1alpha1Env
}
func (c *ConverterImpl) v1alpha1GitDirectoryGeneratorItemToV1alpha1GitDirectoryGeneratorItem(source GitDirectoryGeneratorItem) v1alpha1.GitDirectoryGeneratorItem {
	var v1alpha1GitDirectoryGeneratorItem v1alpha1.GitDirectoryGeneratorItem
	v1alpha1GitDirectoryGeneratorItem.Path = source.Path
	v1alpha1GitDirectoryGeneratorItem.Exclude = source.Exclude
	return v1alpha1GitDirectoryGeneratorItem
}
func (c *ConverterImpl) v1alpha1GitFileGeneratorItemToV1alpha1GitFileGeneratorItem(source GitFileGeneratorItem) v1alpha1.GitFileGeneratorItem {
	var v1alpha1GitFileGeneratorItem v1alpha1.GitFileGeneratorItem
	v1alpha1GitFileGeneratorItem.Path = source.Path
	return v1alpha1GitFileGeneratorItem
}
func (c *ConverterImpl) v1alpha1HelmFileParameterToV1alpha1HelmFileParameter(source HelmFileParameter) v1alpha1.HelmFileParameter {
	var v1alpha1HelmFileParameter v1alpha1.HelmFileParameter
	var xstring string
	if source.Name != nil {
		xstring = *source.Name
	}
	v1alpha1HelmFileParameter.Name = xstring
	var xstring2 string
	if source.Path != nil {
		xstring2 = *source.Path
	}
	v1alpha1HelmFileParameter.Path = xstring2
	return v1alpha1HelmFileParameter
}
func (c *ConverterImpl) v1alpha1HelmParameterToV1alpha1HelmParameter(source HelmParameter) v1alpha1.HelmParameter {
	var v1alpha1HelmParameter v1alpha1.HelmParameter
	var xstring string
	if source.Name != nil {
		xstring = *source.Name
	}
	v1alpha1HelmParameter.Name = xstring
	var xstring2 string
	if source.Value != nil {
		xstring2 = *source.Value
	}
	v1alpha1HelmParameter.Value = xstring2
	var xbool bool
	if source.ForceString != nil {
		xbool = *source.ForceString
	}
	v1alpha1HelmParameter.ForceString = xbool
	return v1alpha1HelmParameter
}
func (c *ConverterImpl) v1alpha1InfoToV1alpha1Info(source Info) v1alpha1.Info {
	var v1alpha1Info v1alpha1.Info
	v1alpha1Info.Name = source.Name
	v1alpha1Info.Value = source.Value
	return v1alpha1Info
}
func (c *ConverterImpl) v1alpha1JsonnetVarToV1alpha1JsonnetVar(source JsonnetVar) v1alpha1.JsonnetVar {
	var v1alpha1JsonnetVar v1alpha1.JsonnetVar
	v1alpha1JsonnetVar.Name = source.Name
	v1alpha1JsonnetVar.Value = source.Value
	var xbool bool
	if source.Code != nil {
		xbool = *source.Code
	}
	v1alpha1JsonnetVar.Code = xbool
	return v1alpha1JsonnetVar
}
func (c *ConverterImpl) v1alpha1KustomizeImagesToV1alpha1KustomizeImages(source KustomizeImages) v1alpha1.KustomizeImages {
	var v1alpha1KustomizeImages v1alpha1.KustomizeImages
	if source != nil {
		v1alpha1KustomizeImages = make(v1alpha1.KustomizeImages, len(source))
		for i := 0; i < len(source); i++ {
			v1alpha1KustomizeImages[i] = v1alpha1.KustomizeImage(source[i])
		}
	}
	return v1alpha1KustomizeImages
}
func (c *ConverterImpl) v1alpha1KustomizeReplicaToV1alpha1KustomizeReplica(source KustomizeReplica) v1alpha1.KustomizeReplica {
	var v1alpha1KustomizeReplica v1alpha1.KustomizeReplica
	v1alpha1KustomizeReplica.Name = source.Name
	v1alpha1KustomizeReplica.Count = c.intstrIntOrStringToIntstrIntOrString(source.Count)
	return v1alpha1KustomizeReplica
}
func (c *ConverterImpl) v1alpha1KustomizeReplicasToV1alpha1KustomizeReplicas(source KustomizeReplicas) v1alpha1.KustomizeReplicas {
	var v1alpha1KustomizeReplicas v1alpha1.KustomizeReplicas
	if source != nil {
		v1alpha1KustomizeReplicas = make(v1alpha1.KustomizeReplicas, len(source))
		for i := 0; i < len(source); i++ {
			v1alpha1KustomizeReplicas[i] = c.v1alpha1KustomizeReplicaToV1alpha1KustomizeReplica(source[i])
		}
	}
	return v1alpha1KustomizeReplicas
}
func (c *ConverterImpl) v1alpha1PluginConfigMapRefToV1alpha1PluginConfigMapRef(source PluginConfigMapRef) v1alpha1.PluginConfigMapRef {
	var v1alpha1PluginConfigMapRef v1alpha1.PluginConfigMapRef
	v1alpha1PluginConfigMapRef.Name = source.Name
	return v1alpha1PluginConfigMapRef
}
func (c *ConverterImpl) v1alpha1PluginInputToV1alpha1PluginInput(source PluginInput) v1alpha1.PluginInput {
	var v1alpha1PluginInput v1alpha1.PluginInput
	v1alpha1PluginInput.Parameters = c.v1alpha1PluginParametersToV1alpha1PluginParameters(source.Parameters)
	return v1alpha1PluginInput
}
func (c *ConverterImpl) v1alpha1PluginParametersToV1alpha1PluginParameters(source PluginParameters) v1alpha1.PluginParameters {
	v1alpha1PluginParameters := make(v1alpha1.PluginParameters, len(source))
	for key, value := range source {
		v1alpha1PluginParameters[key] = c.v1JSONToV1JSON(value)
	}
	return v1alpha1PluginParameters
}
func (c *ConverterImpl) v1alpha1PullRequestGeneratorFilterToV1alpha1PullRequestGeneratorFilter(source PullRequestGeneratorFilter) v1alpha1.PullRequestGeneratorFilter {
	var v1alpha1PullRequestGeneratorFilter v1alpha1.PullRequestGeneratorFilter
	var pString *string
	if source.BranchMatch != nil {
		xstring := *source.BranchMatch
		pString = &xstring
	}
	v1alpha1PullRequestGeneratorFilter.BranchMatch = pString
	var pString2 *string
	if source.TargetBranchMatch != nil {
		xstring2 := *source.TargetBranchMatch
		pString2 = &xstring2
	}
	v1alpha1PullRequestGeneratorFilter.TargetBranchMatch = pString2
	return v1alpha1PullRequestGeneratorFilter
}
func (c *ConverterImpl) v1alpha1ResourceIgnoreDifferencesListToV1alpha1IgnoreDifferences(source []ResourceIgnoreDifferences) v1alpha1.IgnoreDifferences {
	var v1alpha1IgnoreDifferences v1alpha1.IgnoreDifferences
	if source != nil {
		v1alpha1IgnoreDifferences = make(v1alpha1.IgnoreDifferences, len(source))
		for i := 0; i < len(source); i++ {
			v1alpha1IgnoreDifferences[i] = c.v1alpha1ResourceIgnoreDifferencesToV1alpha1ResourceIgnoreDifferences(source[i])
		}
	}
	return v1alpha1IgnoreDifferences
}
func (c *ConverterImpl) v1alpha1ResourceIgnoreDifferencesToV1alpha1ResourceIgnoreDifferences(source ResourceIgnoreDifferences) v1alpha1.ResourceIgnoreDifferences {
	var v1alpha1ResourceIgnoreDifferences v1alpha1.ResourceIgnoreDifferences
	v1alpha1ResourceIgnoreDifferences.Group = source.Group
	v1alpha1ResourceIgnoreDifferences.Kind = source.Kind
	v1alpha1ResourceIgnoreDifferences.Name = source.Name
	v1alpha1ResourceIgnoreDifferences.Namespace = source.Namespace
	var stringList []string
	if source.JSONPointers != nil {
		stringList = make([]string, len(source.JSONPointers))
		for i := 0; i < len(source.JSONPointers); i++ {
			stringList[i] = source.JSONPointers[i]
		}
	}
	v1alpha1ResourceIgnoreDifferences.JSONPointers = stringList
	var stringList2 []string
	if source.JQPathExpressions != nil {
		stringList2 = make([]string, len(source.JQPathExpressions))
		for j := 0; j < len(source.JQPathExpressions); j++ {
			stringList2[j] = source.JQPathExpressions[j]
		}
	}
	v1alpha1ResourceIgnoreDifferences.JQPathExpressions = stringList2
	var stringList3 []string
	if source.ManagedFieldsManagers != nil {
		stringList3 = make([]string, len(source.ManagedFieldsManagers))
		for k := 0; k < len(source.ManagedFieldsManagers); k++ {
			stringList3[k] = source.ManagedFieldsManagers[k]
		}
	}
	v1alpha1ResourceIgnoreDifferences.ManagedFieldsManagers = stringList3
	return v1alpha1ResourceIgnoreDifferences
}
func (c *ConverterImpl) v1alpha1SCMProviderGeneratorFilterToV1alpha1SCMProviderGeneratorFilter(source SCMProviderGeneratorFilter) v1alpha1.SCMProviderGeneratorFilter {
	var v1alpha1SCMProviderGeneratorFilter v1alpha1.SCMProviderGeneratorFilter
	var pString *string
	if source.RepositoryMatch != nil {
		xstring := *source.RepositoryMatch
		pString = &xstring
	}
	v1alpha1SCMProviderGeneratorFilter.RepositoryMatch = pString
	var stringList []string
	if source.PathsExist != nil {
		stringList = make([]string, len(source.PathsExist))
		for i := 0; i < len(source.PathsExist); i++ {
			stringList[i] = source.PathsExist[i]
		}
	}
	v1alpha1SCMProviderGeneratorFilter.PathsExist = stringList
	var stringList2 []string
	if source.PathsDoNotExist != nil {
		stringList2 = make([]string, len(source.PathsDoNotExist))
		for j := 0; j < len(source.PathsDoNotExist); j++ {
			stringList2[j] = source.PathsDoNotExist[j]
		}
	}
	v1alpha1SCMProviderGeneratorFilter.PathsDoNotExist = stringList2
	var pString2 *string
	if source.LabelMatch != nil {
		xstring2 := *source.LabelMatch
		pString2 = &xstring2
	}
	v1alpha1SCMProviderGeneratorFilter.LabelMatch = pString2
	var pString3 *string
	if source.BranchMatch != nil {
		xstring3 := *source.BranchMatch
		pString3 = &xstring3
	}
	v1alpha1SCMProviderGeneratorFilter.BranchMatch = pString3
	return v1alpha1SCMProviderGeneratorFilter
}
func (c *ConverterImpl) v1alpha1SyncOptionsToV1alpha1SyncOptions(source SyncOptions) v1alpha1.SyncOptions {
	var v1alpha1SyncOptions v1alpha1.SyncOptions
	if source != nil {
		v1alpha1SyncOptions = make(v1alpha1.SyncOptions, len(source))
		for i := 0; i < len(source); i++ {
			v1alpha1SyncOptions[i] = source[i]
		}
	}
	return v1alpha1SyncOptions
}
